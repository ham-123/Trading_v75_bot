#!/usr/bin/env python3
"""
Int√©gration Dashboard - √Ä ajouter dans votre main.py
üöÄ Module pour envoyer les donn√©es du bot vers le dashboard
"""

import requests
import json
import logging
import asyncio
from datetime import datetime
from typing import Dict, Optional
import os

logger = logging.getLogger(__name__)


class DashboardIntegration:
    """Classe pour int√©grer le bot avec le dashboard"""

    def __init__(self):
        """Initialisation de l'int√©gration dashboard"""
        self.api_url = os.getenv('DASHBOARD_API_URL', 'http://localhost:8000')
        self.enabled = os.getenv('DASHBOARD_ENABLED', 'true').lower() == 'true'

        if self.enabled:
            logger.info(f"üöÄ Dashboard int√©gration activ√©e: {self.api_url}")
        else:
            logger.info("üìä Dashboard int√©gration d√©sactiv√©e")

    async def send_signal(self, signal_data: Dict) -> bool:
        """Envoyer un nouveau signal au dashboard"""
        if not self.enabled:
            return True

        try:
            # Pr√©parer les donn√©es pour l'API
            api_data = {
                'timestamp': signal_data.get('timestamp', datetime.now().isoformat()),
                'direction': signal_data.get('direction'),
                'entry_price': signal_data.get('entry_price'),
                'stop_loss': signal_data.get('stop_loss'),
                'take_profit': signal_data.get('take_profit'),
                'tech_score': signal_data.get('tech_score'),
                'ai_confidence': signal_data.get('ai_confidence'),
                'combined_score': signal_data.get('combined_score'),
                'signal_quality': signal_data.get('signal_quality'),
                'multi_timeframe': signal_data.get('multi_timeframe', {})
            }

            # Envoyer √† l'API
            response = requests.post(
                f"{self.api_url}/api/signals",
                json=api_data,
                timeout=5
            )

            if response.status_code == 200:
                logger.debug("üìä Signal envoy√© au dashboard")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Erreur dashboard API: {response.status_code}")
                return False

        except requests.exceptions.ConnectionError:
            logger.debug("üìä Dashboard API non disponible")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi signal dashboard: {e}")
            return False

    async def send_system_metrics(self, bot_stats: Dict) -> bool:
        """Envoyer les m√©triques syst√®me"""
        if not self.enabled:
            return True

        try:
            # Pr√©parer m√©triques
            metrics = {
                'timestamp': datetime.now().isoformat(),
                'bot_status': 'RUNNING' if bot_stats.get('connected', False) else 'STOPPED',
                'deriv_connected': bot_stats.get('connected', False),
                'telegram_connected': True,  # Assum√© si on peut envoyer
                'signals_today': bot_stats.get('signals_today', 0),
                'mtf_rejections': bot_stats.get('mtf_rejections', 0),
                'ai_accuracy': bot_stats.get('ai_accuracy', 0),
                'uptime_hours': bot_stats.get('uptime_hours', 0),
                'premium_signals': bot_stats.get('premium_signals', 0),
                'high_quality_signals': bot_stats.get('high_quality_signals', 0)
            }

            response = requests.post(
                f"{self.api_url}/api/system/metrics",
                json=metrics,
                timeout=5
            )

            if response.status_code == 200:
                logger.debug("üìä M√©triques envoy√©es au dashboard")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Erreur metrics dashboard: {response.status_code}")
                return False

        except requests.exceptions.ConnectionError:
            logger.debug("üìä Dashboard API non disponible")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi metrics dashboard: {e}")
            return False

    async def send_price_data(self, price_data: Dict) -> bool:
        """Envoyer donn√©es de prix temps r√©el"""
        if not self.enabled:
            return True

        try:
            # Envoyer seulement toutes les 30 secondes pour √©viter le spam
            current_time = datetime.now()
            if hasattr(self, '_last_price_send'):
                if (current_time - self._last_price_send).total_seconds() < 30:
                    return True

            self._last_price_send = current_time

            # Pr√©parer donn√©es prix
            api_data = {
                'timestamp': price_data.get('timestamp', current_time.isoformat()),
                'price': price_data.get('price'),
                'high': price_data.get('high', price_data.get('price')),
                'low': price_data.get('low', price_data.get('price')),
                'volume': price_data.get('volume', 1000)
            }

            response = requests.post(
                f"{self.api_url}/api/price",
                json=api_data,
                timeout=5
            )

            if response.status_code == 200:
                logger.debug("üìä Prix envoy√© au dashboard")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Erreur price dashboard: {response.status_code}")
                return False

        except requests.exceptions.ConnectionError:
            logger.debug("üìä Dashboard API non disponible")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi prix dashboard: {e}")
            return False

    def test_connection(self) -> bool:
        """Tester la connexion au dashboard"""
        if not self.enabled:
            return True

        try:
            response = requests.get(f"{self.api_url}/", timeout=5)
            return response.status_code == 200
        except:
            return False


# =============================================================================
# MODIFICATIONS √Ä AJOUTER DANS VOTRE MAIN.PY
# =============================================================================

"""
INSTRUCTIONS D'INT√âGRATION:

1. Ajoutez cet import en haut de votre main.py:
   from bot_dashboard_integration import DashboardIntegration

2. Dans la classe OptimizedTradingBotMTF.__init__(), ajoutez:
   self.dashboard = DashboardIntegration()

3. Dans initialize(), apr√®s l'initialisation r√©ussie, ajoutez:
   # Test connexion dashboard
   if self.dashboard.test_connection():
       logger.info("‚úÖ Dashboard connect√©")
   else:
       logger.warning("‚ö†Ô∏è Dashboard non disponible")

4. Dans process_optimized_signal_mtf(), apr√®s l'envoi Telegram, ajoutez:
   # Envoyer au dashboard
   await self.dashboard.send_signal(signal)

5. Dans send_mtf_health_notification(), ajoutez:
   # Envoyer m√©triques au dashboard
   await self.dashboard.send_system_metrics(bot_stats)

6. Dans process_market_data_optimized_mtf(), ajoutez p√©riodiquement:
   # Envoyer prix au dashboard (toutes les 30s automatiquement)
   if data is not None and len(data) > 0:
       latest_data = {
           'price': float(data['price'].iloc[-1]),
           'high': float(data['high'].iloc[-1]) if 'high' in data else float(data['price'].iloc[-1]),
           'low': float(data['low'].iloc[-1]) if 'low' in data else float(data['price'].iloc[-1]),
           'volume': float(data['volume'].iloc[-1]) if 'volume' in data else 1000,
           'timestamp': datetime.now().isoformat()
       }
       await self.dashboard.send_price_data(latest_data)

7. Dans votre .env, ajoutez:
   DASHBOARD_ENABLED=true
   DASHBOARD_API_URL=http://localhost:8000
"""


# =============================================================================
# CODE COMPLET D'INT√âGRATION POUR MAIN.PY
# =============================================================================

class OptimizedTradingBotMTFWithDashboard:
    """Version de votre bot avec int√©gration dashboard"""

    def __init__(self):
        """Initialisation avec dashboard"""
        # Votre code existant...

        # üÜï AJOUTER CETTE LIGNE
        self.dashboard = DashboardIntegration()

        logger.info("üöÄ Bot Trading Vol75 OPTIMIS√â MTF + Dashboard initialis√©")

    async def initialize(self):
        """Initialisation avec test dashboard"""
        try:
            # Votre code d'initialisation existant...

            # üÜï AJOUTER APR√àS L'INITIALISATION R√âUSSIE
            # Test connexion dashboard
            if self.dashboard.test_connection():
                logger.info("‚úÖ Dashboard connect√©")
            else:
                logger.warning("‚ö†Ô∏è Dashboard non disponible")

            # Votre code existant...

        except Exception as e:
            logger.error(f"‚ùå Erreur d'initialisation optimis√©e MTF: {e}")
            raise

    async def process_optimized_signal_mtf(self, signal):
        """Traitement signal avec envoi dashboard"""
        try:
            # Votre code existant...

            # üì± Envoyer notification Telegram MTF COMPL√àTE
            await self.telegram_bot.send_signal(signal)

            # üÜï AJOUTER CETTE LIGNE
            # üìä Envoyer au dashboard
            await self.dashboard.send_signal(signal)

            # Votre code existant...

        except Exception as e:
            logger.error(f"Erreur traitement signal optimis√© MTF: {e}")

    async def send_mtf_health_notification(self):
        """Notification sant√© avec envoi dashboard"""
        try:
            # Votre code existant pour cr√©er bot_stats...

            success = await self.telegram_bot.send_mtf_health_notification(bot_stats)

            # üÜï AJOUTER CETTE LIGNE
            # üìä Envoyer m√©triques au dashboard
            await self.dashboard.send_system_metrics(bot_stats)

            if success:
                logger.info("üì± Notification de sant√© MTF envoy√©e")

        except Exception as e:
            logger.error(f"Erreur notification sant√© MTF: {e}")

    async def process_market_data_optimized_mtf(self):
        """Traitement march√© avec envoi prix dashboard"""
        try:
            # Votre code existant...
            data = await self.deriv_api.get_latest_data()

            if data is None or len(data) < 100:
                return

            self.current_price = float(data['price'].iloc[-1])

            # üÜï AJOUTER CES LIGNES
            # üìä Envoyer prix au dashboard (throttl√© automatiquement)
            latest_data = {
                'price': self.current_price,
                'high': float(data['high'].iloc[-1]) if 'high' in data else self.current_price,
                'low': float(data['low'].iloc[-1]) if 'low' in data else self.current_price,
                'volume': float(data['volume'].iloc[-1]) if 'volume' in data else 1000,
                'timestamp': datetime.now().isoformat()
            }
            await self.dashboard.send_price_data(latest_data)

            # Votre code existant...

        except Exception as e:
            logger.error(f"Erreur traitement optimis√© MTF: {e}")


# =============================================================================
# VARIABLES D'ENVIRONNEMENT √Ä AJOUTER
# =============================================================================

"""
Ajoutez ces lignes dans votre fichier .env:

# Dashboard Configuration
DASHBOARD_ENABLED=true
DASHBOARD_API_URL=http://localhost:8000

# Redis Configuration (optionnel)
REDIS_HOST=localhost
REDIS_PORT=6379
"""

# =============================================================================
# STRUCTURE FINALE DES FICHIERS
# =============================================================================

"""
Votre projet final aura cette structure:

votre-projet/
‚îú‚îÄ‚îÄ main.py                          # Votre bot modifi√©
‚îú‚îÄ‚îÄ ai_model.py                      # IA Ensemble
‚îú‚îÄ‚îÄ telegram_bot.py                  # Telegram MTF
‚îú‚îÄ‚îÄ deriv_api.py                     # API Deriv
‚îú‚îÄ‚îÄ technical_analysis.py            # Analyse technique
‚îú‚îÄ‚îÄ signal_generator.py              # G√©n√©rateur MTF
‚îú‚îÄ‚îÄ multi_timeframe_analysis.py      # Analyse MTF
‚îú‚îÄ‚îÄ bot_dashboard_integration.py     # üÜï Ce fichier
‚îú‚îÄ‚îÄ docker-compose.yml               # üÜï Avec dashboard
‚îú‚îÄ‚îÄ Dockerfile                       # Bot existant
‚îú‚îÄ‚îÄ Dockerfile.dashboard             # üÜï API Dashboard
‚îú‚îÄ‚îÄ Dockerfile.streamlit             # üÜï Interface
‚îú‚îÄ‚îÄ requirements.txt                 # Bot existant
‚îú‚îÄ‚îÄ dashboard/
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt             # üÜï Dashboard deps
‚îÇ   ‚îú‚îÄ‚îÄ api.py                       # üÜï API FastAPI
‚îÇ   ‚îî‚îÄ‚îÄ app.py                       # üÜï Interface Streamlit
‚îú‚îÄ‚îÄ data/                            # Donn√©es partag√©es
‚îú‚îÄ‚îÄ logs/                            # Logs partag√©s
‚îî‚îÄ‚îÄ .env                             # Variables d'environnement
"""

if __name__ == "__main__":
    # Code de test
    import asyncio


    async def test_dashboard_integration():
        """Test de l'int√©gration dashboard"""
        dashboard = DashboardIntegration()

        print("üß™ Test de l'int√©gration dashboard...")

        # Test connexion
        connected = dashboard.test_connection()
        print(f"Connexion: {'‚úÖ' if connected else '‚ùå'}")

        if connected:
            # Test signal
            test_signal = {
                'direction': 'BUY',
                'entry_price': 1050.75,
                'stop_loss': 1048.50,
                'take_profit': 1057.25,
                'tech_score': 85,
                'ai_confidence': 0.87,
                'combined_score': 88.5,
                'signal_quality': 'PREMIUM',
                'multi_timeframe': {
                    'confluence_score': 0.82,
                    'strength': 'very_strong'
                }
            }

            success = await dashboard.send_signal(test_signal)
            print(f"Test signal: {'‚úÖ' if success else '‚ùå'}")

            # Test m√©triques
            test_metrics = {
                'connected': True,
                'signals_today': 5,
                'mtf_rejections': 12,
                'ai_accuracy': 0.876,
                'uptime_hours': 24.5
            }

            success = await dashboard.send_system_metrics(test_metrics)
            print(f"Test m√©triques: {'‚úÖ' if success else '‚ùå'}")


    # Lancer le test si le fichier est ex√©cut√© directement
    asyncio.run(test_dashboard_integration())
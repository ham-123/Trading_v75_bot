#!/usr/bin/env python3
"""
Signal Generator RECONSTRUIT - Version 3.1 COMPL√àTE
üöÄ RECONSTRUCTION TOTALE avec toutes les m√©thodes fonctionnelles
üìä Multi-Timeframes + IA Ensemble + Risk Management Avanc√©
"""

import logging
import os
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Tuple
import time

logger = logging.getLogger(__name__)


class MultiTimeframeSignalGenerator:
    """üöÄ G√©n√©rateur de signaux Multi-Timeframes COMPLET"""

    def __init__(self):
        """Initialisation compl√®te du g√©n√©rateur"""
        # Param√®tres de configuration depuis .env
        self.risk_amount = float(os.getenv('RISK_AMOUNT', 10))
        self.risk_reward_ratio = float(os.getenv('RISK_REWARD_RATIO', 3))
        self.min_tech_score = int(os.getenv('MIN_TECH_SCORE', 65))
        self.min_ai_confidence = float(os.getenv('MIN_AI_CONFIDENCE', 0.70))
        self.min_confluence_score = float(os.getenv('MIN_CONFLUENCE_SCORE', 0.55))
        self.strong_confluence_score = float(os.getenv('STRONG_CONFLUENCE_SCORE', 0.80))

        # Param√®tres de stop loss adaptatifs
        self.base_stop_loss_pct = 0.002  # 0.2% de base
        self.min_stop_loss_pct = 0.001  # 0.1% minimum
        self.max_stop_loss_pct = 0.01  # 1% maximum

        # Historique des signaux pour apprentissage
        self.signal_history = []
        self.max_history = 100

        # Mode avanc√© (peut √™tre activ√© via env)
        self.advanced_mode = os.getenv('ADVANCED_SIGNAL_MODE', 'false').lower() == 'true'

        logger.info(f"üéØ G√©n√©rateur MTF initialis√©:")
        logger.info(f"   üìä Score technique min: {self.min_tech_score}")
        logger.info(f"   üß† Confiance IA min: {self.min_ai_confidence}")
        logger.info(f"   üéØ Confluence min: {self.min_confluence_score}")
        logger.info(f"   ‚ö° Mode avanc√©: {self.advanced_mode}")

    def generate_signal(self, df: pd.DataFrame, tech_score: int, ai_prediction: Dict) -> Optional[Dict]:
        """üéØ M√âTHODE PRINCIPALE - G√©n√©rer un signal Multi-Timeframes"""
        try:
            if df is None or len(df) == 0:
                logger.debug("‚ùå Pas de donn√©es pour g√©n√©rer signal")
                return None

            current_price = float(df['price'].iloc[-1])
            logger.debug(
                f"üîç G√©n√©ration signal: Prix={current_price:.5f}, Tech={tech_score}, IA={ai_prediction.get('confidence', 0):.2f}")

            # √âTAPE 1: V√©rifications de base
            if not self._basic_checks(tech_score, ai_prediction):
                return None

            # √âTAPE 2: Analyse Multi-Timeframes
            mtf_result = self._analyze_multi_timeframes(df)
            if not mtf_result or not mtf_result.get('valid_signal', False):
                logger.debug("‚ùå Signal rejet√© par analyse MTF")
                return None

            # √âTAPE 3: V√©rifier alignement des directions
            mtf_direction = mtf_result.get('direction')
            ai_direction = 'BUY' if ai_prediction.get('direction') == 'UP' else 'SELL'

            if mtf_direction != ai_direction:
                logger.debug(f"‚ùå Directions non align√©es: MTF={mtf_direction}, IA={ai_direction}")
                return None

            # √âTAPE 4: Calculer score combin√©
            confluence_score = mtf_result.get('confluence_score', 0)
            combined_score = self._calculate_combined_score(tech_score, ai_prediction['confidence'], confluence_score)

            # √âTAPE 5: V√©rifier confluence minimum
            if confluence_score < self.min_confluence_score:
                logger.debug(f"‚ùå Confluence insuffisante: {confluence_score:.1%} < {self.min_confluence_score:.1%}")
                return None

            # √âTAPE 6: Calculer les niveaux de trading
            levels = self._calculate_trading_levels(current_price, mtf_direction, combined_score, confluence_score)
            if not levels:
                logger.debug("‚ùå Impossible de calculer les niveaux")
                return None

            # √âTAPE 7: Cr√©er le signal final
            signal = self._create_signal_object(
                mtf_direction, levels, tech_score, ai_prediction,
                combined_score, mtf_result, current_price
            )

            # √âTAPE 8: Enregistrer pour apprentissage
            self._record_signal(signal)

            logger.info(
                f"üéØ Signal MTF g√©n√©r√©: {mtf_direction} √† {current_price:.5f} (Confluence: {confluence_score:.1%})")
            return signal

        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration signal: {e}")
            return None

    def _basic_checks(self, tech_score: int, ai_prediction: Dict) -> bool:
        """V√©rifications de base avant analyse MTF"""
        try:
            # V√©rifier score technique
            if tech_score < self.min_tech_score:
                logger.debug(f"‚ùå Score technique insuffisant: {tech_score} < {self.min_tech_score}")
                return False

            # V√©rifier confiance IA
            ai_confidence = ai_prediction.get('confidence', 0)
            if ai_confidence < self.min_ai_confidence:
                logger.debug(f"‚ùå Confiance IA insuffisante: {ai_confidence:.2f} < {self.min_ai_confidence}")
                return False

            # V√©rifier que l'IA a une direction
            ai_direction = ai_prediction.get('direction')
            if ai_direction not in ['UP', 'DOWN']:
                logger.debug(f"‚ùå Direction IA invalide: {ai_direction}")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rifications de base: {e}")
            return False

    def _analyze_multi_timeframes(self, df: pd.DataFrame) -> Optional[Dict]:
        """üéØ Analyse Multi-Timeframes COMPL√àTE"""
        try:
            # Importer le module MTF
            from multi_timeframe_analysis import MultiTimeframeAnalysis

            mtf_analyzer = MultiTimeframeAnalysis()
            result = mtf_analyzer.multi_timeframe_analysis(df)

            if not result:
                logger.debug("‚ùå √âchec analyse MTF")
                return None

            # V√©rifier si le signal est valide selon les crit√®res MTF
            valid_signal = mtf_analyzer.should_trade(result)
            result['valid_signal'] = valid_signal

            if valid_signal:
                confluence = result.get('confluence_score', 0)
                direction = result.get('direction', 'UNKNOWN')
                logger.debug(f"‚úÖ MTF valide: {direction} (Confluence: {confluence:.1%})")
            else:
                logger.debug("‚ùå Signal MTF invalide selon crit√®res")

            return result

        except ImportError:
            logger.warning("‚ö†Ô∏è Module MTF non disponible, utilisation analyse simple")
            return self._simple_mtf_fallback(df)
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse MTF: {e}")
            return self._simple_mtf_fallback(df)

    def _simple_mtf_fallback(self, df: pd.DataFrame) -> Dict:
        """Analyse simple si MTF module non disponible"""
        try:
            from technical_analysis import TechnicalAnalysis

            ta_analyzer = TechnicalAnalysis()
            indicators = ta_analyzer.calculate_indicators(df)

            if not indicators:
                return {'valid_signal': False, 'confluence_score': 0}

            score = ta_analyzer.calculate_score(df)
            direction = ta_analyzer.get_signal_direction(df)

            # Simuler une confluence bas√©e sur le score technique
            confluence_score = min(score / 100.0, 0.85)

            valid_signal = (
                    score >= self.min_tech_score and
                    direction is not None and
                    confluence_score >= self.min_confluence_score
            )

            return {
                'confluence_score': confluence_score,
                'direction': direction,
                'strength': 'moderate' if confluence_score >= 0.70 else 'weak',
                'valid_signal': valid_signal,
                'timeframes': {
                    'M5': {
                        'direction': direction,
                        'score': score,
                        'strength': confluence_score,
                        'trend': 'simple_fallback'
                    }
                },
                'summary': f"Mode simple M5: {direction} (Score: {score})"
            }

        except Exception as e:
            logger.error(f"‚ùå Erreur fallback simple: {e}")
            return {'valid_signal': False, 'confluence_score': 0}

    def _calculate_combined_score(self, tech_score: int, ai_confidence: float, confluence_score: float) -> float:
        """Calculer le score combin√© avec pond√©ration"""
        try:
            # Pond√©ration: 25% technique, 50% IA, 25% confluence
            combined = (
                               (tech_score / 100.0 * 0.25) +
                               (ai_confidence * 0.50) +
                               (confluence_score * 0.25)
                       ) * 100

            return max(0, min(100, combined))

        except Exception as e:
            logger.error(f"‚ùå Erreur calcul score combin√©: {e}")
            return 0.0

    def _calculate_trading_levels(self, current_price: float, direction: str,
                                  combined_score: float, confluence_score: float) -> Optional[Dict]:
        """üéØ Calculer les niveaux de trading avec adaptation intelligente"""
        try:
            # Stop loss adaptatif selon la qualit√© du signal
            score_factor = max(0.7, min(1.3, 1.0 - (combined_score - 70) / 100))
            confluence_factor = max(0.8, min(1.2, 1.0 - (confluence_score - 0.5) / 2))

            # Stop loss final
            final_sl = self.base_stop_loss_pct * score_factor * confluence_factor
            final_sl = max(self.min_stop_loss_pct, min(self.max_stop_loss_pct, final_sl))

            # Take profit adaptatif selon confluence
            if confluence_score >= self.strong_confluence_score:
                tp_multiplier = self.risk_reward_ratio * 1.2  # Plus ambitieux
            else:
                tp_multiplier = self.risk_reward_ratio

            take_profit_pct = final_sl * tp_multiplier

            # Calculer les prix
            entry_price = current_price

            if direction == 'BUY':
                stop_loss = entry_price * (1 - final_sl)
                take_profit = entry_price * (1 + take_profit_pct)
            else:  # SELL
                stop_loss = entry_price * (1 + final_sl)
                take_profit = entry_price * (1 - take_profit_pct)

            # Calculer les montants
            risk_amount = self.risk_amount
            reward_amount = risk_amount * tp_multiplier
            actual_ratio = tp_multiplier

            return {
                'entry_price': round(entry_price, 5),
                'stop_loss': round(stop_loss, 5),
                'take_profit': round(take_profit, 5),
                'risk_amount': round(risk_amount, 2),
                'reward_amount': round(reward_amount, 2),
                'actual_ratio': round(actual_ratio, 2),
                'stop_loss_pct': round(final_sl * 100, 3),
                'take_profit_pct': round(take_profit_pct * 100, 3)
            }

        except Exception as e:
            logger.error(f"‚ùå Erreur calcul niveaux: {e}")
            return None

    def _create_signal_object(self, direction: str, levels: Dict, tech_score: int,
                              ai_prediction: Dict, combined_score: float,
                              mtf_result: Dict, current_price: float) -> Dict:
        """üéØ Cr√©er l'objet signal final avec toutes les donn√©es"""
        try:
            confluence_score = mtf_result.get('confluence_score', 0)

            signal = {
                # Donn√©es de base
                'timestamp': datetime.now().isoformat(),
                'direction': direction,
                'entry_price': levels['entry_price'],
                'stop_loss': levels['stop_loss'],
                'take_profit': levels['take_profit'],
                'risk_amount': levels['risk_amount'],
                'reward_amount': levels['reward_amount'],
                'actual_ratio': levels['actual_ratio'],

                # Scores et confiance
                'tech_score': tech_score,
                'ai_confidence': ai_prediction['confidence'],
                'combined_score': combined_score,
                'ai_direction': ai_prediction.get('direction'),

                # Multi-timeframes (structure compl√®te)
                'multi_timeframe': {
                    'confluence_score': confluence_score,
                    'confluence_percentage': confluence_score * 100,
                    'strength': mtf_result.get('strength', 'moderate'),
                    'direction': mtf_result.get('direction'),
                    'timeframes_detail': mtf_result.get('timeframes', {}),
                    'summary': mtf_result.get('summary', ''),
                    'valid_signal': mtf_result.get('valid_signal', False)
                },

                # Niveaux en pourcentage
                'stop_loss_pct': levels['stop_loss_pct'],
                'take_profit_pct': levels['take_profit_pct'],

                # Qualit√© et contexte
                'signal_quality': self._assess_signal_quality(combined_score, confluence_score),
                'filter_passed': True,
                'market_conditions': self._get_market_context(current_price),

                # M√©tadonn√©es
                'generator_version': '3.1-MTF',
                'creation_time': time.time()
            }

            return signal

        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation objet signal: {e}")
            return {}

    def _assess_signal_quality(self, combined_score: float, confluence_score: float) -> str:
        """√âvaluer la qualit√© du signal"""
        try:
            if combined_score >= 90 and confluence_score >= self.strong_confluence_score:
                return "PREMIUM"
            elif combined_score >= 85 and confluence_score >= 0.75:
                return "HIGH"
            elif combined_score >= 80 and confluence_score >= self.min_confluence_score:
                return "GOOD"
            elif combined_score >= 75 and confluence_score >= 0.60:
                return "AVERAGE"
            else:
                return "LOW"

        except Exception:
            return "UNKNOWN"

    def _get_market_context(self, current_price: float) -> Dict:
        """Obtenir le contexte de march√© simple"""
        try:
            return {
                'current_price': current_price,
                'trend': 'unknown',
                'volatility': 'normal',
                'momentum': 'neutral',
                'timestamp': datetime.now().isoformat()
            }

        except Exception:
            return {}

    def _record_signal(self, signal: Dict):
        """Enregistrer le signal pour apprentissage"""
        try:
            # Ajouter √† l'historique
            signal_record = {
                'timestamp': signal['timestamp'],
                'direction': signal['direction'],
                'entry_price': signal['entry_price'],
                'combined_score': signal['combined_score'],
                'confluence_score': signal['multi_timeframe']['confluence_score'],
                'signal_quality': signal['signal_quality']
            }

            self.signal_history.append(signal_record)

            # Garder seulement les derniers signaux
            if len(self.signal_history) > self.max_history:
                self.signal_history = self.signal_history[-self.max_history:]

            logger.debug(f"üìù Signal enregistr√© (Total: {len(self.signal_history)})")

        except Exception as e:
            logger.error(f"‚ùå Erreur enregistrement signal: {e}")

    def get_generator_stats(self) -> Dict:
        """Obtenir les statistiques du g√©n√©rateur"""
        return {
            'type': 'Multi-Timeframes Signal Generator',
            'version': '3.1-MTF',
            'advanced_mode': self.advanced_mode,
            'parameters': {
                'min_tech_score': self.min_tech_score,
                'min_ai_confidence': self.min_ai_confidence,
                'min_confluence_score': self.min_confluence_score,
                'strong_confluence_score': self.strong_confluence_score,
                'risk_reward_ratio': self.risk_reward_ratio,
                'base_stop_loss_pct': self.base_stop_loss_pct
            },
            'signal_history_count': len(self.signal_history),
            'filters_enabled': [
                'tech_score_filter',
                'ai_confidence_filter',
                'confluence_filter',
                'direction_alignment',
                'mtf_analysis'
            ]
        }

    def get_recent_signals_summary(self, count: int = 10) -> Dict:
        """R√©sum√© des signaux r√©cents"""
        try:
            if not self.signal_history:
                return {'total': 0, 'summary': 'Aucun signal g√©n√©r√©'}

            recent = self.signal_history[-count:]

            # Statistiques
            buy_count = sum(1 for s in recent if s['direction'] == 'BUY')
            sell_count = len(recent) - buy_count

            avg_score = sum(s['combined_score'] for s in recent) / len(recent)
            avg_confluence = sum(s['confluence_score'] for s in recent) / len(recent)

            # Qualit√©
            quality_counts = {}
            for s in recent:
                quality = s['signal_quality']
                quality_counts[quality] = quality_counts.get(quality, 0) + 1

            return {
                'total': len(recent),
                'buy_signals': buy_count,
                'sell_signals': sell_count,
                'avg_combined_score': round(avg_score, 1),
                'avg_confluence': round(avg_confluence * 100, 1),
                'quality_distribution': quality_counts,
                'last_signal_time': recent[-1]['timestamp'] if recent else None
            }

        except Exception as e:
            logger.error(f"‚ùå Erreur r√©sum√© signaux: {e}")
            return {'total': 0, 'summary': 'Erreur calcul r√©sum√©'}

    def reset_history(self):
        """R√©initialiser l'historique des signaux"""
        self.signal_history = []
        logger.info("üîÑ Historique des signaux r√©initialis√©")

    def update_parameters(self, **kwargs):
        """Mettre √† jour les param√®tres du g√©n√©rateur"""
        try:
            updated = []

            for param, value in kwargs.items():
                if hasattr(self, param):
                    old_value = getattr(self, param)
                    setattr(self, param, value)
                    updated.append(f"{param}: {old_value} ‚Üí {value}")

            if updated:
                logger.info(f"üîß Param√®tres mis √† jour: {', '.join(updated)}")
            else:
                logger.warning("‚ö†Ô∏è Aucun param√®tre valide fourni")

        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour param√®tres: {e}")


# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def test_signal_generator():
    """Test du g√©n√©rateur de signaux"""
    try:
        print("üß™ Test du g√©n√©rateur de signaux MTF...")

        # Cr√©er g√©n√©rateur
        generator = MultiTimeframeSignalGenerator()

        # Donn√©es de test
        import numpy as np
        dates = pd.date_range(start='2024-01-01', periods=200, freq='5min')
        prices = 1000 + np.cumsum(np.random.randn(200) * 0.5)

        df_test = pd.DataFrame({
            'timestamp': dates,
            'price': prices,
            'high': prices + np.random.uniform(0, 2, 200),
            'low': prices - np.random.uniform(0, 2, 200),
            'volume': np.random.randint(100, 1000, 200)
        })

        # Test avec diff√©rents param√®tres
        test_cases = [
            {'tech_score': 85, 'ai_confidence': 0.82, 'direction': 'UP'},
            {'tech_score': 75, 'ai_confidence': 0.71, 'direction': 'DOWN'},
            {'tech_score': 60, 'ai_confidence': 0.65, 'direction': 'UP'},  # Devrait √©chouer
        ]

        for i, test_case in enumerate(test_cases, 1):
            print(f"\n--- Test {i} ---")

            ai_prediction = {
                'confidence': test_case['ai_confidence'],
                'direction': test_case['direction']
            }

            signal = generator.generate_signal(df_test, test_case['tech_score'], ai_prediction)

            if signal:
                print(f"‚úÖ Signal g√©n√©r√©: {signal['direction']} √† {signal['entry_price']}")
                print(f"   Qualit√©: {signal['signal_quality']}")
                print(f"   Confluence: {signal['multi_timeframe']['confluence_score']:.1%}")
            else:
                print(f"‚ùå Signal rejet√© (score={test_case['tech_score']}, conf={test_case['ai_confidence']})")

        # Statistiques
        stats = generator.get_generator_stats()
        print(f"\nüìä Statistiques:")
        print(f"   Version: {stats['version']}")
        print(f"   Signaux g√©n√©r√©s: {stats['signal_history_count']}")

        summary = generator.get_recent_signals_summary()
        print(f"   R√©sum√©: {summary}")

        print("\n‚úÖ Test termin√©!")

    except Exception as e:
        print(f"‚ùå Erreur test: {e}")


if __name__ == "__main__":
    # Lancer le test si ex√©cut√© directement
    test_signal_generator()
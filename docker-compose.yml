version: '3.8'

services:
  # Bot de trading principal (EXISTANT - lÃ©gÃ¨rement modifiÃ©)
  trading-bot:
    build: .
    container_name: vol75_trading_bot

    # Volumes pour persister les donnÃ©es
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs

    # Charger les variables d'environnement
    env_file:
      - .env

    # Politique de redÃ©marrage
    restart: unless-stopped

    # Configuration rÃ©seau
    networks:
      - trading_network

    # DÃ©pend de Redis pour le dashboard
    depends_on:
      - redis

    # Monitoring de santÃ© (corrigÃ© le nom du log)
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/logs/trading_bot_mtf_optimized.log') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Limites de ressources
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ðŸ†• API Dashboard Backend
  dashboard-api:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: vol75_dashboard_api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
    restart: unless-stopped
    networks:
      - trading_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ðŸ†• Interface Streamlit Frontend
  dashboard-app:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: vol75_dashboard_app
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - API_BASE_URL=http://dashboard-api:8000
    restart: unless-stopped
    networks:
      - trading_network
    depends_on:
      - dashboard-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ðŸ†• Redis pour cache temps rÃ©el
  redis:
    image: redis:7-alpine
    container_name: vol75_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - trading_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# RÃ©seau personnalisÃ© (EXISTANT)
networks:
  trading_network:
    driver: bridge

# Volumes (EXISTANT + Redis)
volumes:
  redis_data:    # ðŸ†• Pour Redis
  bot_data:      # EXISTANT
  bot_logs:      # EXISTANT
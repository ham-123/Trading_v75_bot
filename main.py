#!/usr/bin/env python3
"""
Bot Trading Vol75 - Point d'entr√©e principal
Orchestration de tous les composants du syst√®me de trading automatis√©
"""

import asyncio
import logging
import time
import os
import signal
import sys
from datetime import datetime, timezone
from dotenv import load_dotenv

# Imports des modules du bot
from deriv_api import DerivAPI
from technical_analysis import TechnicalAnalysis
from ai_model import AIModel
from signal_generator import SignalGenerator
from telegram_bot import TelegramBot

# Charger les variables d'environnement
load_dotenv()


# Configuration des logs
def setup_logging():
    """Configuration du syst√®me de logs"""
    log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
    verbose = os.getenv('VERBOSE_LOGGING', 'false').lower() == 'true'

    # Cr√©er le dossier logs s'il n'existe pas
    os.makedirs('logs', exist_ok=True)

    # Format des logs
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # Configuration des handlers
    handlers = [
        logging.FileHandler('logs/trading_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]

    # Configuration du logging
    logging.basicConfig(
        level=getattr(logging, log_level),
        format=log_format,
        handlers=handlers,
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # R√©duire le bruit des autres libs si pas en mode verbose
    if not verbose:
        logging.getLogger('websocket').setLevel(logging.WARNING)
        logging.getLogger('tensorflow').setLevel(logging.ERROR)
        logging.getLogger('urllib3').setLevel(logging.WARNING)


logger = logging.getLogger(__name__)


class TradingBot:
    """Classe principale du bot de trading Vol75"""

    def __init__(self):
        """Initialisation du bot"""
        self.deriv_api = DerivAPI()
        self.technical_analysis = TechnicalAnalysis()
        self.ai_model = AIModel()
        self.signal_generator = SignalGenerator()
        self.telegram_bot = TelegramBot()

        # Variables de contr√¥le
        self.last_signal_time = 0
        self.consecutive_losses = 0
        self.daily_trades = 0
        self.last_trade_date = None
        self.running = True

        # Param√®tres de configuration
        self.signal_interval = int(os.getenv('SIGNAL_INTERVAL', 3600))  # 1h par d√©faut
        self.max_daily_trades = int(os.getenv('MAX_DAILY_TRADES', 8))
        self.max_consecutive_losses = int(os.getenv('MAX_CONSECUTIVE_LOSSES', 3))

        # Setup signal handlers pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """Gestionnaire pour arr√™t propre du bot"""
        logger.info(f"Signal {signum} re√ßu, arr√™t du bot...")
        self.running = False

    async def initialize(self):
        """Initialisation des composants"""
        try:
            logger.info("üöÄ Initialisation du bot Vol75...")

            # V√©rifier la configuration
            if not self._check_configuration():
                raise Exception("Configuration invalide")

            # Connexion √† Deriv API
            await self.deriv_api.connect()
            logger.info("‚úÖ Connexion Deriv API √©tablie")

            # Initialiser le mod√®le IA
            logger.info("üß† Chargement du mod√®le IA...")
            self.ai_model.load_or_create_model()
            logger.info("‚úÖ Mod√®le IA pr√™t")

            # Test de notification Telegram
            await self.telegram_bot.send_message(
                "ü§ñ <b>Bot Vol75 d√©marr√© avec succ√®s!</b>\n"
                f"üìä Mode: {os.getenv('TRADING_MODE', 'demo')}\n"
                f"üí∞ Capital: {os.getenv('CAPITAL', 1000)}$\n"
                f"‚ö†Ô∏è Risque par trade: {os.getenv('RISK_AMOUNT', 10)}$"
            )

            logger.info("‚úÖ Initialisation termin√©e avec succ√®s")

        except Exception as e:
            logger.error(f"‚ùå Erreur d'initialisation: {e}")
            raise

    def _check_configuration(self):
        """V√©rifier la configuration requise"""
        required_vars = ['DERIV_APP_ID', 'TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID']
        missing_vars = []

        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)

        if missing_vars:
            logger.error(f"Variables d'environnement manquantes: {missing_vars}")
            return False

        return True

    async def run(self):
        """Boucle principale du bot"""
        try:
            await self.initialize()

            logger.info("üîÑ D√©marrage de la boucle principale...")

            while self.running:
                try:
                    # V√©rifier l'heure de trading (√©viter 22h-6h UTC)
                    if not self._is_trading_hours():
                        await asyncio.sleep(300)  # V√©rifier toutes les 5 minutes
                        continue

                    # Reset du compteur journalier si nouveau jour
                    self._reset_daily_counter()

                    # V√©rifier les limites de trading
                    if not self._can_trade():
                        await asyncio.sleep(300)
                        continue

                    # R√©cup√©rer et analyser les donn√©es
                    await self.process_market_data()

                    # Attendre avant la prochaine analyse
                    await asyncio.sleep(300)  # 5 minutes

                except Exception as e:
                    logger.error(f"Erreur dans la boucle principale: {e}")
                    await asyncio.sleep(60)  # Attendre 1 minute avant de r√©essayer

        except KeyboardInterrupt:
            logger.info("Arr√™t du bot demand√© par l'utilisateur")
        except Exception as e:
            logger.error(f"Erreur critique dans run(): {e}")
            await self.telegram_bot.send_message(f"‚ùå <b>Erreur critique:</b> {e}")
        finally:
            await self.cleanup()

    def _is_trading_hours(self):
        """V√©rifier si on est dans les heures de trading"""
        current_hour = datetime.now(timezone.utc).hour
        # √âviter 22h-6h UTC (heures de faible liquidit√©)
        return not (22 <= current_hour or current_hour < 6)

    def _reset_daily_counter(self):
        """Reset du compteur de trades journaliers"""
        today = datetime.now().date()
        if self.last_trade_date != today:
            self.daily_trades = 0
            self.last_trade_date = today
            logger.info(f"üìÖ Nouveau jour - Reset compteur trades: {today}")

    def _can_trade(self):
        """V√©rifier si on peut trader"""
        current_time = time.time()

        # V√©rifier l'intervalle minimum entre signaux
        if current_time - self.last_signal_time < self.signal_interval:
            return False

        # V√©rifier le maximum de trades journaliers
        if self.daily_trades >= self.max_daily_trades:
            logger.debug(f"Maximum trades journaliers atteint: {self.daily_trades}")
            return False

        # V√©rifier les pertes cons√©cutives
        if self.consecutive_losses >= self.max_consecutive_losses:
            logger.warning(f"Maximum pertes cons√©cutives atteint: {self.consecutive_losses}")
            return False

        return True

    async def process_market_data(self):
        """Traiter les donn√©es de march√© et g√©n√©rer des signaux"""
        try:
            # R√©cup√©rer les donn√©es r√©centes
            data = await self.deriv_api.get_latest_data()
            if data is None or len(data) < 50:
                logger.debug("Pas assez de donn√©es pour l'analyse")
                return

            logger.debug(f"Analyse de {len(data)} points de donn√©es")

            # Analyse technique
            tech_score = self.technical_analysis.calculate_score(data)
            logger.debug(f"Score technique: {tech_score}")

            # Pr√©diction IA
            ai_prediction = self.ai_model.predict(data)
            logger.debug(f"Pr√©diction IA: {ai_prediction}")

            # G√©n√©rer signal si conditions r√©unies
            signal = self.signal_generator.generate_signal(
                data, tech_score, ai_prediction
            )

            if signal:
                await self.process_signal(signal)

        except Exception as e:
            logger.error(f"Erreur traitement donn√©es march√©: {e}")

    async def process_signal(self, signal):
        """Traiter et envoyer un signal"""
        try:
            logger.info(f"üéØ Signal g√©n√©r√©: {signal['direction']} √† {signal['entry_price']}")

            # Envoyer notification Telegram
            await self.telegram_bot.send_signal(signal)

            # Mettre √† jour les compteurs
            self.last_signal_time = time.time()
            self.daily_trades += 1

            # Sauvegarder le signal
            self._save_signal(signal)

            # Log d√©taill√©
            logger.info(
                f"üìä Signal envoy√© - Direction: {signal['direction']}, "
                f"Score: {signal['combined_score']}, "
                f"Trades aujourd'hui: {self.daily_trades}"
            )

        except Exception as e:
            logger.error(f"Erreur traitement signal: {e}")

    def _save_signal(self, signal):
        """Sauvegarder le signal dans un fichier CSV"""
        try:
            import csv
            os.makedirs('data', exist_ok=True)

            csv_file = 'data/signals.csv'
            file_exists = os.path.exists(csv_file)

            with open(csv_file, 'a', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=signal.keys())

                # √âcrire l'en-t√™te si nouveau fichier
                if not file_exists:
                    writer.writeheader()

                writer.writerow(signal)

        except Exception as e:
            logger.error(f"Erreur sauvegarde signal: {e}")

    async def cleanup(self):
        """Nettoyage avant arr√™t"""
        try:
            logger.info("üßπ Nettoyage avant arr√™t...")

            # Fermer la connexion Deriv
            await self.deriv_api.disconnect()

            # Message d'arr√™t
            await self.telegram_bot.send_message("üõë <b>Bot Vol75 arr√™t√©</b>")

            logger.info("‚úÖ Nettoyage termin√©")

        except Exception as e:
            logger.error(f"Erreur lors du nettoyage: {e}")


def main():
    """Point d'entr√©e principal"""
    # Configuration des logs
    setup_logging()

    logger.info("=" * 50)
    logger.info("BOT TRADING VOL75 - D√âMARRAGE")
    logger.info("=" * 50)

    # Cr√©er et lancer le bot
    bot = TradingBot()

    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        sys.exit(1)
    finally:
        logger.info("Bot arr√™t√©")


if __name__ == "__main__":
    main()